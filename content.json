{"meta":{"title":"五灯","subtitle":"","description":"","author":"Yifei Zhang","url":"http://yfzhang-nk.github.io","root":"/"},"pages":[{"title":"Contributors 「鸣谢」","date":"2020-06-26T07:46:55.000Z","updated":"2020-06-26T08:21:53.697Z","comments":true,"path":"contributors/index.html","permalink":"http://yfzhang-nk.github.io/contributors/index.html","excerpt":"","text":"特别鸣谢 hexo 开发者和 Volantis 主题开发者，以及王庆彬的主题配置 Hexo volantis 王庆彬"},{"title":"所有分类","date":"2020-06-26T07:55:46.000Z","updated":"2020-06-26T07:57:43.055Z","comments":true,"path":"categories/index.html","permalink":"http://yfzhang-nk.github.io/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2020-06-26T08:01:36.000Z","updated":"2020-06-26T08:02:12.129Z","comments":true,"path":"tags/index.html","permalink":"http://yfzhang-nk.github.io/tags/index.html","excerpt":"","text":""},{"title":"关于我","date":"2020-06-26T08:48:35.000Z","updated":"2020-06-26T08:50:35.433Z","comments":true,"path":"about/index.html","permalink":"http://yfzhang-nk.github.io/about/index.html","excerpt":"","text":""}],"posts":[{"title":"程序员应该知道的97件事-7 当心共享","slug":"beware-the-share","date":"2020-07-31T09:21:57.000Z","updated":"2020-08-03T03:46:06.189Z","comments":true,"path":"2020/ckdeia6ik000s8dxfd349cjo2/","link":"","permalink":"http://yfzhang-nk.github.io/2020/ckdeia6ik000s8dxfd349cjo2/","excerpt":"","text":"原文链接： 当心共享那是我在公司的第一个项目，我刚刚完成我的学位，急于证明自己，每天工作到很晚，检查已有的代码。当我做完第一个功能开发，我格外小心地把学到的所有东西落实到位，评论、日志、尽可能的抽离共享代码到库中。然后对我认为已经准备好的代码做评审时，使我意识到重用是不被赞同的。 怎么会这样呢？学校里重用被认为是高质量软件工程的缩影。我读过的文章和教科书，以及资深的软件工程师都是这样告诉我的。一切都错了吗？ 原来是我漏掉了一个关键信息： 上下文 系统中两个截然不同的部分以相同的方式执行某种逻辑，并没有我们想象中的那么重要。","categories":[{"name":"英文文章翻译","slug":"英文文章翻译","permalink":"http://yfzhang-nk.github.io/categories/%E8%8B%B1%E6%96%87%E6%96%87%E7%AB%A0%E7%BF%BB%E8%AF%91/"}],"tags":[{"name":"程序员应该知道的97件事","slug":"程序员应该知道的97件事","permalink":"http://yfzhang-nk.github.io/tags/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%8497%E4%BB%B6%E4%BA%8B/"}]},{"title":"程序员应该知道的97件事-6 重构之前","slug":"before-you-refactor","date":"2020-07-23T08:11:52.000Z","updated":"2020-07-24T08:00:39.172Z","comments":true,"path":"2020/ckdeia6ii000o8dxfaywphkn1/","link":"","permalink":"http://yfzhang-nk.github.io/2020/ckdeia6ii000o8dxfaywphkn1/","excerpt":"原文链接： 重构之前某些时刻每个程序员需要重构已有的代码。但是在做重构之前请想清楚一下几点，这样会帮你和其他人省很多时间（或者痛苦）： 重构最好的方法应该从观察已有的代码库和相关测试案例。这会帮助你了解当前代码的优点和缺点，以保证能保留已有的优点和避免错误。我们都认为我们会比现有系统做的好…直到完成，发现我们有些事比以前做的并不比以前好，甚至更糟，因为我们没有从之前的错误中吸取教训。","text":"原文链接： 重构之前某些时刻每个程序员需要重构已有的代码。但是在做重构之前请想清楚一下几点，这样会帮你和其他人省很多时间（或者痛苦）： 重构最好的方法应该从观察已有的代码库和相关测试案例。这会帮助你了解当前代码的优点和缺点，以保证能保留已有的优点和避免错误。我们都认为我们会比现有系统做的好…直到完成，发现我们有些事比以前做的并不比以前好，甚至更糟，因为我们没有从之前的错误中吸取教训。 避免重写所有的诱惑。最好重用尽量多的旧代码。不管代码多丑，但只要是被测试过和评审过的代码就可以重用。丢弃旧代码-尤其是已经上线的-意味着你丢弃了数月的测试和久经考验的代码，里面可能有很多背景和你不知道的缺陷修复。如果你不考虑这些，你写出来的代码就会出现很多难解的问题，而这些问题其实已经在旧代码中被修复了。这会浪费很多时间、精力和多年来获得的知识。 多次增量修改好于一次重大调整。增量调整可以让我们容易从反馈中（比如测试）获取对系统的影响。一次修改后出现上百个测试失败，肯定是不好的，这会导致我们感到挫折和压力，从而做出错误决定。一次两三个测试失败是容易处理的，提供更可管理性的方法。 每次迭代结束，保证现有测试案例通过是很重要的。如果现有测试不能充分覆盖你的变动，就要新增测试案例。没有经过应有的考虑就不要轻易抛弃旧代码的测试案例。表面上看其中一些测试可能并不适用新的设计，但是它们很值得深挖其中特殊测试案例存在的原因。 抛去个人喜好和自我。如果没有问题，为什么要去修复它？代码风格和结构不满足我们的喜好，不是一个好的重构理由。同样，你认为会比上一个程序员做的更好，这也不是一个好的理由。 追求新技术也不是重构的充分条件。最糟糕的重构原因就是当前代码已经远远落后今天最酷炫的技术，而且我们认为最新的语言和框架能做更多高级的事情。除非成本收益分析说明新语言或框架能够在功能性、维护性和创造性上产生重要提升，否则保持现状就好。 记住人总是会犯错的。重构永远不能保证新代码更好，或者和原来一样好。我曾经看到过，也经历过不少失败的重构。人非圣贤孰能无过。 By 单词take stock of 观察、估量temptation n. 引诱；诱惑物take … into account 考虑；重视；体谅gauge v. 测量；估计","categories":[{"name":"英文文章翻译","slug":"英文文章翻译","permalink":"http://yfzhang-nk.github.io/categories/%E8%8B%B1%E6%96%87%E6%96%87%E7%AB%A0%E7%BF%BB%E8%AF%91/"}],"tags":[{"name":"程序员应该知道的97件事","slug":"程序员应该知道的97件事","permalink":"http://yfzhang-nk.github.io/tags/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%8497%E4%BB%B6%E4%BA%8B/"}]},{"title":"程序员应该知道的97件事-5 美在简单之中","slug":"beauty-is-in-simplicity","date":"2020-07-21T08:24:33.000Z","updated":"2020-07-22T07:24:16.600Z","comments":true,"path":"2020/ckdeia6ic000e8dxf0ihy1xhr/","link":"","permalink":"http://yfzhang-nk.github.io/2020/ckdeia6ic000e8dxf0ihy1xhr/","excerpt":"原文链接： 美在简单之中有一句格言是所有软件开发者应该知道并且牢记于心的： 风格、和谐、优雅、节奏之美取决于简单。 柏拉图 一言以蔽之，这句话概括出了软件开发者渴求的价值所在。","text":"原文链接： 美在简单之中有一句格言是所有软件开发者应该知道并且牢记于心的： 风格、和谐、优雅、节奏之美取决于简单。 柏拉图 一言以蔽之，这句话概括出了软件开发者渴求的价值所在。 对于代码，我们有很多追求的东西： 可读性 可维护性 开发速度 美感柏拉图想告诉我们实现这些品质的因素是简单。 什么是漂亮的代码？这是一个非常主观的问题。正像很多观念认知取决于我们的背景一样，美的感知也极大的依赖于我们的背景。学习艺术的人和学习科学的人对美有不同的视角（至少有这个倾向）。艺术专业的人更倾向于通过比较软件和艺术工作来寻找美感，科学专业的人更强调谈论对称和黄金比例，试图把事情简化为公式。以我的经验来看，简洁性是双方论证的基石。 想想你学习过的源代码。如果你还没有读过别人的代码，立刻停止读这篇文章，找一些开源的代码学习学习。真的，我是认真的！去网上搜索哪些知名专家写的代码，只要是你熟悉的语言就行。 你回来了？好的，我们说到哪了？哦，是的…我发现那些能引起我共鸣的、我认为漂亮的代码都有很多共性。其中最主要的就是简洁性。我发现应用或者系统不管有多复杂，每个独立部分都保持着简洁性。这些简单的对象都拥有相似的简洁性：单一职责、方法高内聚、方法命名自描述。有人认为5-10行一个短方法有点极端，甚至有些语言特性使得方法很难几行内实现功能。尽管如此，这样的简洁性应该是我们追求的目标。 漂亮代码的底线是简单。每个独立的部分都应该保持简单：拥有简单的职责，与系统其他部分保持简单的关联。通过干净整洁、可测试的代码，在系统的整个生命周期内保持高效的开发速度，这才是让我们的系统能够承受住时间考验的方法。美来源于简单，并因简单被人们发现。 By 单词keep close to one’s heart(s) 牢记于心、放在心上aspire to 渴求formulae n. 公式（formula的复数)","categories":[{"name":"英文文章翻译","slug":"英文文章翻译","permalink":"http://yfzhang-nk.github.io/categories/%E8%8B%B1%E6%96%87%E6%96%87%E7%AB%A0%E7%BF%BB%E8%AF%91/"}],"tags":[{"name":"程序员应该知道的97件事","slug":"程序员应该知道的97件事","permalink":"http://yfzhang-nk.github.io/tags/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%8497%E4%BB%B6%E4%BA%8B/"}]},{"title":"程序员应该知道的97件事-4 自动化你的编码标准","slug":"automate-your-coding-standard","date":"2020-07-16T09:53:42.000Z","updated":"2020-07-22T07:24:44.700Z","comments":true,"path":"2020/ckdeia6i500088dxf0avnc7s7/","link":"","permalink":"http://yfzhang-nk.github.io/2020/ckdeia6i500088dxf0avnc7s7/","excerpt":"原文链接： 自动化你的编码规范你可能有过这样的经历，项目一开始时，每个人都有很多想法-我们称为新项目决议。这些决议经常会记录到文档里。关于代码的决议最终会称为项目的代码规范。在启动会议上，开发负责人会浏览文档，最好的情况，每个人都同意会尝试遵守它。然而，一旦项目开始，这些好的想法都会一个一个被抛弃。当最终交付项目时，代码看起来一团糟，没有人知道怎么变成这样的。 是什么时候变糟的？大概在启动会议时，项目成员有些不太在意，其他人没有理解这点，更糟糕的，有些人根本就不同意这些规范，可能已经开始计划不服从这些规范。最后，有些人抓住了重点而且也同意，但是当项目压力过高时，他们不得不放任不管规范了。格式良好的代码并不会在客户那里获得加分，他们只是想要更多功能。而且加入代码规范不是自动化的，遵守它是一项很无聊的任务。尝试下缩进一个排版混乱的类，你就能明白自动化的好处了。","text":"原文链接： 自动化你的编码规范你可能有过这样的经历，项目一开始时，每个人都有很多想法-我们称为新项目决议。这些决议经常会记录到文档里。关于代码的决议最终会称为项目的代码规范。在启动会议上，开发负责人会浏览文档，最好的情况，每个人都同意会尝试遵守它。然而，一旦项目开始，这些好的想法都会一个一个被抛弃。当最终交付项目时，代码看起来一团糟，没有人知道怎么变成这样的。 是什么时候变糟的？大概在启动会议时，项目成员有些不太在意，其他人没有理解这点，更糟糕的，有些人根本就不同意这些规范，可能已经开始计划不服从这些规范。最后，有些人抓住了重点而且也同意，但是当项目压力过高时，他们不得不放任不管规范了。格式良好的代码并不会在客户那里获得加分，他们只是想要更多功能。而且加入代码规范不是自动化的，遵守它是一项很无聊的任务。尝试下缩进一个排版混乱的类，你就能明白自动化的好处了。 既然有这些问题，我们为什么还要一开始就制定编码规范呢？使用统一的代码规范的一个原因是，可以避免某些人通过使用自己的编码风格“独占”一段代码。我们想要阻止开发者使用反模式，以此避免一些常见Bug。总之，代码规范能够使在项目中工作变的轻松，从头到尾都可以保持开发速度。达到这个效果的前提是每个人都遵守它，否则就没有用了，比如有的人使用三个空格缩进，另一些人用四个缩进。 有很丰富的工具被用来生成代码质量报告或者是文档化维护代码规范，但这都不能全面解决问题。一定要把它自动化，在任何地方尽可能的强制执行。以下有一些示例： 保证你的代码规范检查是构建过程中的一环，以此可以让每个人都能在编译的时候自动的运行一遍规范检查。 用静态代码分析工具去扫描一遍代码中非预期的反模式。一旦发现终止构建。 学习如何配置这些工具，以便你可以定制你自己的扫描策略。 不要只测量代码测试覆盖率，还要自动化的检查结果。同样的，一旦发现测试覆盖率过低，就终止构建。 尽量自动化所有你认为重要的地方。你不可能把所有你关心的点都自动化起来。有一些地方你无法做到标记或修复的，把它们写到一个指导手册里，作为代码规范自动化的补充，但是你要接受这个事实：你的同事可能不会那么严格遵守手册中的内容。 最后，代码规范应该是动态的而不是静态的。随着项目的演进，项目需求会变，一开始看起来很聪明的做法，几个月后就看起来没有那么必要了。 By 单词quite often 经常get underway 开始、启程in all 总之diligently 勤奋的，勤勉的 个人观点除了代码规范应该自动化外，其他东西也可以学习自动化的方式。比如公司的价值观，个人的思维模式（或者行为准则）。大脑需要慢系统才能完成的事情，借助自动化这个外脑，在快系统中就能够得出正确决定。","categories":[{"name":"英文文章翻译","slug":"英文文章翻译","permalink":"http://yfzhang-nk.github.io/categories/%E8%8B%B1%E6%96%87%E6%96%87%E7%AB%A0%E7%BF%BB%E8%AF%91/"}],"tags":[{"name":"程序员应该知道的97件事","slug":"程序员应该知道的97件事","permalink":"http://yfzhang-nk.github.io/tags/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%8497%E4%BB%B6%E4%BA%8B/"}]},{"title":"程序员应该知道的97件事-3 想想用户会怎么做","slug":"ask-what-would-the-user-do","date":"2020-07-10T07:36:01.000Z","updated":"2020-07-22T07:25:10.663Z","comments":true,"path":"2020/ckdeia6ie000g8dxf2keydmiq/","link":"","permalink":"http://yfzhang-nk.github.io/2020/ckdeia6ie000g8dxf2keydmiq/","excerpt":"原文链接： 问问“用户会怎么做”我们倾向于假设其他人和我们思考方式一样，但是他们不会。心理学家称这个现象叫做虚假同感偏差。当人们思考或者行事跟我们不一样时，我们潜意识上很容易在某种程度会给他们打上缺陷的标签。 这种偏见解释了程序员们为什么很难把自己放到用户的位置上，用户也不会像程序员一样想问题。首先，他们很少花时间使用电脑。他们不知道也不关心电脑如何工作。这就意味着程序员们解决问题时采用了一些习以为常的技术，用户们却不会使用。在页面接口上，用户不会识别出图示和线索，尽管这些是程序员们经常使用的。","text":"原文链接： 问问“用户会怎么做”我们倾向于假设其他人和我们思考方式一样，但是他们不会。心理学家称这个现象叫做虚假同感偏差。当人们思考或者行事跟我们不一样时，我们潜意识上很容易在某种程度会给他们打上缺陷的标签。 这种偏见解释了程序员们为什么很难把自己放到用户的位置上，用户也不会像程序员一样想问题。首先，他们很少花时间使用电脑。他们不知道也不关心电脑如何工作。这就意味着程序员们解决问题时采用了一些习以为常的技术，用户们却不会使用。在页面接口上，用户不会识别出图示和线索，尽管这些是程序员们经常使用的。 找出用户是如何思考的最好办法就是观察他们。要求用户使用你开发的软件，完成一项任务。确保这是一个真正的任务：“加总一列数据”，“计算你上个月的收支”。避免太详细的任务，比如，请选择这些电子表格单元格，在下面输入一个求和公式，这个任务给了很大暗示。让用户说说他的操作流程。不要打断或者试图帮助他。要不停思考“他/她为什么这么做”。 你会注意到用户做的这些事情的核心都是类似的。他们试图采用相同的顺序完成任务，并且在相同的地方犯一样的错误。你就应该设计这个核心操作了。这个不同于设计会议，因为在那样的会议上，人们更倾向于听到“如果用户想…该怎么办？”。这会导致复杂的功能并不是用户想要的。观察他们减少这种问题。 你会碰到用户被卡住的情况，当你卡住时，你会到处看看；当用户被卡住时，他们只会缩小他们的关注点。对于他们来说在屏幕的其他地方看到解决方案就变得更困难。这就是为什么帮助文字对于用户交互设计是一个不好的解决方法。如果你必须添加指示或者说明文档，保证把它们放在对的地方，比如靠近会出现问题的区域。正因为用户有限的注意力，工具栏提示会比帮助文档有用的多。 用户往往会蒙混过关。他们找到一个有效的方法他们就会坚持这么用下去，而不管这个方法多复杂。所以最好给用户提供一个真正明显的方法，而不是提供两三捷径。你还会发现用户说他们想要的，和他们真正想要的之间存在差异。令人担忧的是收集用户需求的通用方法是问他们。这也是为什么说获取用户需求最好的办法是观察他们。花一小时观察用户比猜测用户想要什么能获取更多的信息。 By 单词for a start 首先；作为开始get stuck v. 受骗；被卡在…；被堵…muddle through 终于应付过去；混过去stick with 坚持；继续做；保持联系convoluted adj. 复杂的；费解的；旋绕的 个人观点“Users tend to muddle through”，这点我深有体会，曾经就有用户告诉我们，不这样做，他们也会有其他办法实现想要的功能，只是会复杂一些，用户并不是笨，只是懒，懒的去发现你设计的捷径，只要有一个方法能实现自己的要求，就可以了，没有必要花时间去找到更多方法。相反，用户使用了复杂的方法后，反而会抱怨我们太笨，为什么不那样设计，要绕这么大一个弯子。","categories":[{"name":"英文文章翻译","slug":"英文文章翻译","permalink":"http://yfzhang-nk.github.io/categories/%E8%8B%B1%E6%96%87%E6%96%87%E7%AB%A0%E7%BF%BB%E8%AF%91/"}],"tags":[{"name":"程序员应该知道的97件事","slug":"程序员应该知道的97件事","permalink":"http://yfzhang-nk.github.io/tags/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%8497%E4%BB%B6%E4%BA%8B/"}]},{"title":"程序员应该知道的97件事-2 应用函数式编程原则","slug":"apply-functional-programming-principles","date":"2020-07-09T08:18:42.000Z","updated":"2020-07-22T07:26:07.508Z","comments":true,"path":"2020/ckdeia6ia000a8dxf6djm5cpm/","link":"","permalink":"http://yfzhang-nk.github.io/2020/ckdeia6ia000a8dxf6djm5cpm/","excerpt":"原文链接： 应用函数式编程原则函数式编程(FP)最近又受到了主流编程社区的喜爱，部分原因是对于来自多核的挑战，函数范式的特性占有有利的位置。尽管这个原因的确是函数式编程很好的一个应用，但不是我给你推荐函数式编程的原因。 掌握函数式编程可以极大地提高你在其他上下文上写代码的质量。如果你能深入理解和应用函数范式，你的设计会拥有很高的引用透明性。","text":"原文链接： 应用函数式编程原则函数式编程(FP)最近又受到了主流编程社区的喜爱，部分原因是对于来自多核的挑战，函数范式的特性占有有利的位置。尽管这个原因的确是函数式编程很好的一个应用，但不是我给你推荐函数式编程的原因。 掌握函数式编程可以极大地提高你在其他上下文上写代码的质量。如果你能深入理解和应用函数范式，你的设计会拥有很高的引用透明性。 引用透明性是一个很好的特性：表示一个函数针对相同的输入，始终产生相同的结果，而不管是在什么地方和什么时候调用。也就是说，函数的求值很少依赖（理想中是完全不依赖）可变状态的副作用。 命令式代码的主要缺陷来自可变的变量。读到这里的每个程序员都有这样的经历：在某个特殊情况下某些值不是期望的。可见性语义可以帮助我们减少这类问题，至少可以缩小范围，但真正的罪魁祸首是程序设计中滥用了变量。 在这个方面，我们确实没有从中获取太多帮助。面向对象默认使用这样的设计，因为他们经常展示由多个相关且长生命周期的对象图表组成的示例，美其名曰赋值方法，这样做其实是很危险的。但是，通过巧妙的测试驱动开发的设计，特别是确保“模拟职责，而不是对象”，可以消除不必要的可变性。 最终结果应该是这样一个设计：创建众多小函数，每个函数拥有自己的职责分配，按照输入的参数输出结果，而不是引用可变的成员变量。这样做产生的缺陷少，此外它们还容易调试，因为很容易定位该设计引入的标志值，比通过特定的上下文推断错误的赋值要好。这将大幅度增加引用透明性，想让这种意识深入骨髓，没有比学习函数式编程更好的办法了，因为这个在函数式编程中是作为标准出现的。 当然，这个方法不是在所有场景下都是最优的。比如，在面向对象系统中，这种风格在领域模型开发（例：打破商业规则的复杂度）上比用户界面开发更能产出更好的结果 掌握了函数式编程范式，你将更明智的把本章内容应用到其他领域。你的对象系统与引用透明性更能产生共鸣，跟函数式对等方式的接近程度超乎你的想象。实际上，有人断言函数式编程和面向对象编程是相互映射的两端，是计算机领域里的阴阳两极。 By 单词be attributed to 归因于…culprit n. 犯人，罪犯act on 对…起作用；按照…行事rogue value 维基百科上显示为sentinel value的别名，表示标记值 个人观点函数式编程的特性我还没有深入的理解，此时不置评论。不过我相信，函数式编程有很好的特性，但软件工程上没有银弹，任何的设计都有适用的范围，使用前先深入了解它。","categories":[{"name":"英文文章翻译","slug":"英文文章翻译","permalink":"http://yfzhang-nk.github.io/categories/%E8%8B%B1%E6%96%87%E6%96%87%E7%AB%A0%E7%BF%BB%E8%AF%91/"}],"tags":[{"name":"程序员应该知道的97件事","slug":"程序员应该知道的97件事","permalink":"http://yfzhang-nk.github.io/tags/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%8497%E4%BB%B6%E4%BA%8B/"}]},{"title":"每个程序员应该知道的97件事","slug":"97things-every-programmer-should-know","date":"2020-07-08T07:33:53.000Z","updated":"2020-07-24T08:15:48.398Z","comments":true,"path":"2020/ckdeia6i300068dxfcnmi425j/","link":"","permalink":"http://yfzhang-nk.github.io/2020/ckdeia6i300068dxfcnmi425j/","excerpt":"极客时间上购买了左耳听风的专栏，就是陈皓（左耳朵耗子）一个关于技术、成长、管理的文章合集，内容确实是丰富。 首先作者提供了一个程序员练级的方法，叫做ARTS，就是每周完成一个ARTS： Algorithm：每周至少做一道算法题； Review：阅读并点评至少一篇英文技术文章； Tip：学习至少一个技术技巧； Share：分享一篇有观点和思考的技术文章。 刚好其中一篇关于程序员修养的文章推荐了《97 Things Every Programmer Should Know》，有很多编程方面的建议，文章也都很经典，且都是英文文章，可以满足Review的内容，每周至少一篇，将该系列的文章翻译到自己的博客中，顺带提高自己的英文水平。没有商业目的，只为提升自己。","text":"极客时间上购买了左耳听风的专栏，就是陈皓（左耳朵耗子）一个关于技术、成长、管理的文章合集，内容确实是丰富。 首先作者提供了一个程序员练级的方法，叫做ARTS，就是每周完成一个ARTS： Algorithm：每周至少做一道算法题； Review：阅读并点评至少一篇英文技术文章； Tip：学习至少一个技术技巧； Share：分享一篇有观点和思考的技术文章。 刚好其中一篇关于程序员修养的文章推荐了《97 Things Every Programmer Should Know》，有很多编程方面的建议，文章也都很经典，且都是英文文章，可以满足Review的内容，每周至少一篇，将该系列的文章翻译到自己的博客中，顺带提高自己的英文水平。没有商业目的，只为提升自己。 以下为我的文章链接: 程序员应该知道的97件事-1 三思而行 程序员应该知道的97件事-2 应用函数式编程原则 程序员应该知道的97件事-3 想想用户会怎么做 程序员应该知道的97件事-4 自动化你的编码标准 程序员应该知道的97件事-6 重构之前","categories":[{"name":"英文文章翻译","slug":"英文文章翻译","permalink":"http://yfzhang-nk.github.io/categories/%E8%8B%B1%E6%96%87%E6%96%87%E7%AB%A0%E7%BF%BB%E8%AF%91/"}],"tags":[{"name":"程序员应该知道的97件事","slug":"程序员应该知道的97件事","permalink":"http://yfzhang-nk.github.io/tags/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%8497%E4%BB%B6%E4%BA%8B/"}]},{"title":"程序员应该知道的97件事-1 三思而行","slug":"act-with-prudence","date":"2020-07-08T03:38:57.000Z","updated":"2020-07-22T07:25:34.974Z","comments":true,"path":"2020/ckdeia6hs00008dxfcuesbvn9/","link":"","permalink":"http://yfzhang-nk.github.io/2020/ckdeia6hs00008dxfcuesbvn9/","excerpt":"原文链接： 三思而行不管你做什么，都应该三思而行且考虑后果 阿农 在一次迭代的开始，不管日程表规划的多么舒服，有些时候都无法避免的面临压力。当面对“好好做”还是“快快做”的选择时，我们经常倾向于选择“快快做”，并告诉自己我之后会回来修复它。当对自己、团队以及客户做出这样承诺时，我们是认真的。但时常下一次迭代带来了新的问题，我们必须聚焦在新问题上。这种延迟的工作被称作“技术债务”，它是程序员的天敌。Martin Fowler把这种有意的技术债务收录到自己的技术债务分类中，以区分非主动的技术债务。","text":"原文链接： 三思而行不管你做什么，都应该三思而行且考虑后果 阿农 在一次迭代的开始，不管日程表规划的多么舒服，有些时候都无法避免的面临压力。当面对“好好做”还是“快快做”的选择时，我们经常倾向于选择“快快做”，并告诉自己我之后会回来修复它。当对自己、团队以及客户做出这样承诺时，我们是认真的。但时常下一次迭代带来了新的问题，我们必须聚焦在新问题上。这种延迟的工作被称作“技术债务”，它是程序员的天敌。Martin Fowler把这种有意的技术债务收录到自己的技术债务分类中，以区分非主动的技术债务。 技术债务类似贷款：你短期内能从中获取收益，但在还清前不得不付利息给它。代码中走捷径会让它很难增加新功能或者进行重构。这是缺陷和脆弱测试案例的滋生源泉。留它越久，就会越糟糕。当着手解决最开始的那个问题时，摆在面前的是一系列“不太好的”设计导致了代码很难重构或者纠正问题。实际上，只有事情发展到不得不解决它时，我们才会回去修复问题。到那时经常修复问题变得很困难，以至于我们没有办法承担时间成本和风险。 大多数的技术债务来源于我们面临最后期限或者是非常简单的小需求。除非情况要求你必须这样，否则别让自己陷入这种境地。但是你一定要记录它，并且尽快回来修复掉，否则你的情况很快变坏。只要你做了这种妥协的决定，就一定写下一个任务卡记录到你的追踪系统里，确定自己不会忘记。 要想损失最小，最好在下次迭代中规划修复工作。如果保留技术债务可以给你带来收益，那也要让这个收益的成本可见。这会在强调技术债务的商业价值时，将修复工作放在合适的优先级上。计算和追踪保留技术债务的收益需要具体项目具体分析，但是一定要记录下来。 尽快还清技术债务，否则是不明智的。 By 单词on the understanding that 如果；在…条件下all too often 时常，经常是breeding grounds 滋生地get around to 抽时间出来做…；开始考虑做…accrue v. 产生；自然增长或利益增加；积累imprudent adj. 轻率的，鲁莽的；不明智的 个人观点技术债务是程序员无法逃避的问题，作者提到了这种有意为之的技术债务，来自于迭代的时间紧迫，或者功能简单，所以采用了不是最优的，但是能够快速实验的解决方案。在国内（不确定国外有没有)还有一个可能是这个人要离职（或者是离开项目）不会考虑后续维护之类的事情，留下了粗糙的代码。因此接手项目或者管理手下时，注意这样的情况，自身也尽量避免成为这样糟糕的程序员。","categories":[{"name":"英文文章翻译","slug":"英文文章翻译","permalink":"http://yfzhang-nk.github.io/categories/%E8%8B%B1%E6%96%87%E6%96%87%E7%AB%A0%E7%BF%BB%E8%AF%91/"}],"tags":[{"name":"程序员应该知道的97件事","slug":"程序员应该知道的97件事","permalink":"http://yfzhang-nk.github.io/tags/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%8497%E4%BB%B6%E4%BA%8B/"}]},{"title":"博客开篇","slug":"hello-world","date":"2020-07-07T09:31:51.416Z","updated":"2020-07-07T09:31:51.417Z","comments":true,"path":"2020/ckdeia6ih000l8dxfbju35e06/","link":"","permalink":"http://yfzhang-nk.github.io/2020/ckdeia6ih000l8dxfbju35e06/","excerpt":"Hexo博客第一篇，说说自己为什么要写博客，博客写什么东西，以及之后的计划。","text":"Hexo博客第一篇，说说自己为什么要写博客，博客写什么东西，以及之后的计划。 开篇一晃都码农十年了，期间在外企打过工、在民企写过代码、创过业、当过外包老板，现在在某大公司安安稳稳的过着995生活。养孩子和供房子，加上疫情和经济大环境不好，没了折腾的动力和能力，索性安安稳稳中积累自己的能力，通过博客记录自己的学习过程，也作为一个输出的阵地，顺带提高下写作功力。 写点啥技术学习 虽然作为一个老码农，仍然还是有很多技术盲区，之后的学习不能局限于阅读，会通过博文内化为信手拈来的东西。当然还会有一部分是对英文内容的翻译（不是纯翻译，会改变为自己的语言)。 非技术知识 一个人的知识结构应该像一架飞机，机身为自身专业能力，需要深入，飞机的机翼也是必不可少的，知识架构上代表了知识广度，这几年由于参加CPA考试，学习了很多财务分析知识；跟随得到也听了很多非常不错的经济、金融、管理的课程（还有些杂七杂八的内容）。看完听过之后，也会在博客上进行输出。 记录 个人随笔，记录点感悟和日记； 儿童编程教育，我对其发展比较看好，因此会记录些自己的调研结果和想法； 如果可能，做些自己感兴趣的影视分析，热点评论。 咋计划2020年还会花费更多的时间去进行CPA备考，先计划“翻译翻译”《97 things every programmer should know》，随后不追求每月必须有多少篇，但是只要觉得有用我就会记录下来。 奔着卓越努力！","categories":[{"name":"随笔","slug":"随笔","permalink":"http://yfzhang-nk.github.io/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"生活","slug":"生活","permalink":"http://yfzhang-nk.github.io/tags/%E7%94%9F%E6%B4%BB/"}]}],"categories":[{"name":"英文文章翻译","slug":"英文文章翻译","permalink":"http://yfzhang-nk.github.io/categories/%E8%8B%B1%E6%96%87%E6%96%87%E7%AB%A0%E7%BF%BB%E8%AF%91/"},{"name":"随笔","slug":"随笔","permalink":"http://yfzhang-nk.github.io/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"程序员应该知道的97件事","slug":"程序员应该知道的97件事","permalink":"http://yfzhang-nk.github.io/tags/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%8497%E4%BB%B6%E4%BA%8B/"},{"name":"生活","slug":"生活","permalink":"http://yfzhang-nk.github.io/tags/%E7%94%9F%E6%B4%BB/"}]}