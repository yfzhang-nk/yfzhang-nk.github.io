<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>应用函数式编程原则</title>
      <link href="/2020/ckcem520n0000sexfg12x5tc0/"/>
      <url>/2020/ckcem520n0000sexfg12x5tc0/</url>
      
        <content type="html"><![CDATA[<p>函数式编程最近又受到主流程序员社区的喜欢，函数式编程的原则都有哪些，为什么会受到推崇。</p><a id="more"></a><p>原文链接：<a href="https://97-things-every-x-should-know.gitbooks.io/97-things-every-programmer-should-know/content/en/thing_02/" title="" target="">Apply Functional Programming Principles</a></p><h2 id=""><a href="#" class="headerlink" title=""></a><span class='p blue'>应用函数式编程原则</span></h2><p>函数式编程(FP)最近又受到了主流编程社区的喜爱，部分原因是对于来自多核的挑战，函数范式的特性占有有利的位置。尽管这个原因的确是函数式编程很好的一个应用，但不是我给你推荐函数式编程的原因。</p><p>掌握函数式编程可以极大地提高你在其他上下文上写代码的质量。如果你能深入理解和应用函数范式，你的设计会拥有很高的引用透明性。</p><p>引用透明性是一个很好的特性：表示一个函数针对相同的输入，始终产生相同的结果，而不管是在什么地方和什么时候调用。也就是说，函数的求值很少依赖（理想中是完全不依赖）可变状态的副作用。</p><p>命令式代码的主要缺陷来自可变的变量。读到这里的每个程序员都有这样的经历：在某个特殊情况下某些值不是期望的。可见性语义可以帮助我们减少这类问题，至少可以缩小范围，但真正的罪魁祸首是程序设计中滥用了变量。</p><p>在这个方面，我们确实没有从中获取太多帮助。面向对象默认使用这样的设计，因为他们经常展示由多个相关且长生命周期的对象图表组成的示例，美其名曰赋值方法，这样做其实是很危险的。但是，通过巧妙的测试驱动开发的设计，特别是确保“模拟职责，而不是对象”，可以消除不必要的可变性。</p><p>最终结果应该是这样一个设计：创建众多小函数，每个函数拥有自己的职责分配，按照输入的参数输出结果，而不是引用可变的成员变量。这样做产生的缺陷少，此外它们还容易调试，因为很容易定位该设计引入的标志值，比通过特定的上下文推断错误的赋值要好。这将大幅度增加引用透明性，想让这种意识深入骨髓，没有比学习函数式编程更好的办法了，因为这个在函数式编程中是作为标准出现的。</p><p>当然，这个方法不是在所有场景下都是最优的。比如，在面向对象系统中，这种风格在领域模型开发（例：打破商业规则的复杂度）上比用户界面开发更能产出更好的结果</p><p>掌握了函数式编程范式，你将更明智的把本章内容应用到其他领域。你的对象系统与引用透明性更能产生共鸣，跟函数式对等方式的接近程度超乎你的想象。实际上，有人断言函数式编程和面向对象编程是相互映射的两端，是计算机领域里的阴阳两极。</p><p>By <a href="https://www.linkedin.com/in/egarson/" title="" target="">Edward Garson</a></p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><span class='p blue'>单词</span></h2><blockquote class="pullquote [class]"><p><span class='p green'>be attributed to</span>  归因于…<br><span class='p green'>culprit</span>  n. 犯人，罪犯<br><span class='p green'>act on</span>  对…起作用；按照…行事<br><span class='p green'>rogue value</span> 维基百科上显示为sentinel value的别名，表示标记值</p></blockquote><h2 id="-2"><a href="#-2" class="headerlink" title=""></a><span class='p blue'>个人观点</span></h2><p>函数式编程的特性我还没有深入的理解，此时不置评论。不过我相信，函数式编程有很好的特性，但软件工程上没有银弹，任何的设计都有适用的范围，使用前先深入了解它。</p>]]></content>
      
      
      <categories>
          
          <category> 英文文章翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序员应该知道的97件事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每个程序员应该知道的97件事</title>
      <link href="/2020/ckcd1q803000704xf0ca6gryg/"/>
      <url>/2020/ckcd1q803000704xf0ca6gryg/</url>
      
        <content type="html"><![CDATA[<p>极客时间上购买了左耳听风的专栏，就是陈皓（左耳朵耗子）一个关于技术、成长、管理的文章合集，内容确实是丰富。</p><p>首先作者提供了一个程序员练级的方法，叫做ARTS，就是每周完成一个ARTS：</p><ol><li>Algorithm：每周至少做一道算法题；</li><li>Review：阅读并点评至少一篇英文技术文章；</li><li>Tip：学习至少一个技术技巧；</li><li>Share：分享一篇有观点和思考的技术文章。</li></ol><p>刚好其中一篇关于程序员修养的文章推荐了《97 Things Every Programmer Should Know》，有很多编程方面的建议，文章也都很经典，且都是英文文章，可以满足Review的内容，每周至少一篇，将该系列的文章翻译到自己的博客中，顺带提高自己的英文水平。没有商业目的，只为提升自己。</p><p>以下为我的文章链接:</p><a href="/2020/ckcctc3y7000004xfdqwd7aar/" title="程序员应该知道的97件事-1 三思而行">程序员应该知道的97件事-1 三思而行</a>]]></content>
      
      
      <categories>
          
          <category> 英文文章翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序员应该知道的97件事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员应该知道的97件事-1 三思而行</title>
      <link href="/2020/ckcctc3y7000004xfdqwd7aar/"/>
      <url>/2020/ckcctc3y7000004xfdqwd7aar/</url>
      
        <content type="html"><![CDATA[<p class='p logo'>Whatever you undertake</p><p>开启对「97 Things Every Programmer Should Know」的翻译，今天是第一篇「Act with Prudence」</p><a id="more"></a><p>原文链接：<a href="https://97-things-every-x-should-know.gitbooks.io/97-things-every-programmer-should-know/content/en/thing_01/" title="" target="">Act with Prudence</a></p><h2 id=""><a href="#" class="headerlink" title=""></a><span class='p blue'>三思而行</span></h2><blockquote><p>不管你做什么，都应该三思而行且考虑后果</p><footer><strong>阿农</strong></footer></blockquote><p>在一次迭代的开始，不管日程表规划的多么舒服，有些时候都无法避免的面临压力。当面对“好好做”还是“快快做”的选择时，我们经常倾向于选择“快快做”，并告诉自己我之后会回来修复它。当对自己、团队以及客户做出这样承诺时，我们是认真的。但时常下一次迭代带来了新的问题，我们必须聚焦在新问题上。这种延迟的工作被称作“技术债务”，它是程序员的天敌。Martin Fowler把这种有意的技术债务收录到自己的技术债务分类中，以区分非主动的技术债务。</p><p>技术债务类似贷款：你短期内能从中获取收益，但在还清前不得不付利息给它。代码中走捷径会让它很难增加新功能或者进行重构。这是缺陷和脆弱测试案例的滋生源泉。留它越久，就会越糟糕。当着手解决最开始的那个问题时，摆在面前的是一系列“不太好的”设计导致了代码很难重构或者纠正问题。实际上，只有事情发展到不得不解决它时，我们才会回去修复问题。到那时经常修复问题变得很困难，以至于我们没有办法承担时间成本和风险。</p><p>大多数的技术债务来源于我们面临最后期限或者是非常简单的小需求。除非情况要求你必须这样，否则别让自己陷入这种境地。<span class='p red'>但是你一定要记录它，并且尽快回来修复掉</span>，否则你的情况很快变坏。只要你做了这种妥协的决定，就一定写下一个任务卡记录到你的追踪系统里，确定自己不会忘记。</p><p>要想损失最小，最好在下次迭代中规划修复工作。如果保留技术债务可以给你带来收益，那也要让这个收益的成本可见。这会在强调技术债务的商业价值时，将修复工作放在合适的优先级上。计算和追踪保留技术债务的收益需要具体项目具体分析，但是一定要记录下来。</p><p>尽快还清技术债务，否则是不明智的。</p><p>By <a href="https://www.linkedin.com/in/sebrose/" title="" target="">Seb Rose</a></p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><span class='p blue'>单词</span></h2><blockquote class="pullquote [class]"><p><span class='p green'>on the understanding that</span>  如果；在…条件下<br><span class='p green'>all too often</span>  时常，经常是<br><span class='p green'>breeding grounds</span>  滋生地<br><span class='p green'>get around to</span>  抽时间出来做…；开始考虑做…<br><span class='p green'>accrue</span>  v. 产生；自然增长或利益增加；积累<br><span class='p green'>imprudent</span> adj. 轻率的，鲁莽的；不明智的</p></blockquote><h2 id="-2"><a href="#-2" class="headerlink" title=""></a><span class='p blue'>个人观点</span></h2><p>技术债务是程序员无法逃避的问题，作者提到了这种有意为之的技术债务，来自于迭代的时间紧迫，或者功能简单，所以采用了不是最优的，但是能够快速实验的解决方案。在国内（不确定国外有没有)还有一个可能是这个人要离职（或者是离开项目）不会考虑后续维护之类的事情，留下了粗糙的代码。因此接手项目或者管理手下时，注意这样的情况，自身也尽量避免成为这样糟糕的程序员。</p>]]></content>
      
      
      <categories>
          
          <category> 英文文章翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序员应该知道的97件事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客开篇</title>
      <link href="/2020/ckcbpr3wo0001xoxf4ehz6gv5/"/>
      <url>/2020/ckcbpr3wo0001xoxf4ehz6gv5/</url>
      
        <content type="html"><![CDATA[<p>Hexo博客第一篇，说说自己为什么要写博客，博客写什么东西，以及之后的计划。</p><a id="more"></a><h2 id=""><a href="#" class="headerlink" title=""></a><span class='p blue'>开篇</span></h2><p>一晃都码农十年了，期间在外企打过工、在民企写过代码、创过业、当过外包老板，现在在某大公司安安稳稳的过着995生活。养孩子和供房子，加上疫情和经济大环境不好，没了折腾的动力和能力，索性安安稳稳中积累自己的能力，通过博客记录自己的学习过程，也作为一个输出的阵地，顺带提高下写作功力。</p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><span class='p blue'>写点啥</span></h2><p class='p left logo h4 green'>技术学习</p><p>虽然作为一个老码农，仍然还是有很多技术盲区，之后的学习不能局限于阅读，会通过博文内化为信手拈来的东西。当然还会有一部分是对英文内容的翻译（不是纯翻译，会改变为自己的语言)。</p><p class='p left logo h4 green'>非技术知识</p><p>一个人的知识结构应该像一架飞机，机身为自身专业能力，需要深入，飞机的机翼也是必不可少的，知识架构上代表了知识广度，这几年由于参加CPA考试，学习了很多财务分析知识；跟随得到也听了很多非常不错的经济、金融、管理的课程（还有些杂七杂八的内容）。看完听过之后，也会在博客上进行输出。 </p><p class='p left logo h4 green'>记录</p><ul><li>个人随笔，记录点感悟和日记；</li><li>儿童编程教育，我对其发展比较看好，因此会记录些自己的调研结果和想法；</li><li>如果可能，做些自己感兴趣的影视分析，热点评论。</li></ul><h2 id="-2"><a href="#-2" class="headerlink" title=""></a><span class='p blue'>咋计划</span></h2><p>2020年还会花费更多的时间去进行CPA备考，先计划“翻译翻译”《97 things every programmer should know》，随后不追求每月必须有多少篇，但是只要觉得有用我就会记录下来。</p><p class='p left logo h4'>奔着卓越努力！</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
